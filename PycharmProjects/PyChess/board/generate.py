class ChessBoard:
    def __init__(self):

        from board.setboard import Setboard

        self.SetBoard = Setboard()

        # Look as if it were an actual board, (0 = id of piece {-1 if vacant}, 0 = faction of piece {-1 if vacant},
        # 0 = color of square {White = 0, Black = 1})

        self.board = [
            (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1),
            (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0),
            (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1),
            (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0),
            (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1),
            (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0),
            (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1),
            (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0),
        ]

    def resetBoard(self):
        self.board = [
            [(' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1)],
            [(' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0)],
            [(' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1)],
            [(' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0)],
            [(' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1)],
            [(' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0)],
            [(' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1)],
            [(' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0), (' ', ' ', 1), (' ', ' ', 0)],
        ]


    def generateTop(self):

        string = '''
        _______________
        |             |
        |                                                                                               
        |       ''' + self.SetBoard.idToColoredSymbol(self.board[0][0][0], self.board[0][0][1]) + '''      |
        |             |
        |             |
        '''

        print(string)


board = ChessBoard()
board.generateTop()